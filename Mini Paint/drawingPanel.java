/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.lab7;

import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import javax.swing.SwingUtilities;

/**
 *
 * @author ADMIN
 */
public class drawingPanel extends javax.swing.JPanel implements DrawingEngine {

    /**
     * Creates new form drawingPanel
     */
    public drawingPanel() {
        initComponents();
    }
    ArrayList<abstractShape> shp = new ArrayList<>();
    int selectedIndex = -1;
    boolean resize = false;

    public int getSelectedindex() {
        return selectedIndex;
    }

    public void setSelectedindex(int selectedIndex) {
        this.selectedIndex = selectedIndex;
    }

    @Override
    protected void paintComponent(Graphics canvas) {
        super.paintComponent(canvas);
        for (int i = 0; i < shp.size(); i++) {
            shp.get(i).draw(canvas);
        }
        refresh(canvas); //REMOVE??

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        Application a = (Application) SwingUtilities.getWindowAncestor(this);

        Point p = evt.getPoint();
        if (selectedIndex != -1) {
            Shape s = shp.get(selectedIndex);
            resize = false;
            if (s instanceof Rectangle) {
                Rectangle r = (Rectangle) s;
                if (r.ULCorners(p) || r.URCorners(p) || r.LLCorners(p) || r.LRCorners(p)) {
                    r.setDraggingPoint(p);
                    resize = true;
                    return;
                }
            } else if (s instanceof lineSegment) {
                lineSegment l = (lineSegment) s;
                if (l.containsFirstPoint(p) || l.containsScondPoint(p)) {
                    l.setDraggingPoint(p);
                    resize = true;
                    return;
                }
            } else if (s instanceof Oval) {
                Oval c = (Oval) s;
                if (c.ULCorners(p) || c.URCorners(p) || c.LLCorners(p) || c.LRCorners(p)) {
                    c.setDraggingPoint(p);
                    resize = true;
                    return;
                }
            } else if (s instanceof Triangle) {
                Triangle t = (Triangle) s;
                if (t.containsFirstPoint(p) || t.containsScondPoint(p) || t.containsThirdPoint(p)) {
                    t.setDraggingPoint(p);
                    resize = true;
                    return;
                }
            }
        }
        if (selectedIndex != -1) {
            shp.get(selectedIndex).setSelected(false);
            repaint();
        }
        for (int i = shp.size() - 1; i >= 0; i--) {
            if (shp.get(i).contains(p)) {
                selectedIndex = i;
                a.setComboBox(i);
                shp.get(i).setDraggingPoint(p);
                shp.get(i).setSelected(true);
                repaint();
                return;
            }
        }
        selectedIndex = -1;
        a.setComboBox(-1);

    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        Point p = evt.getPoint();
        if (resize == true) {
            shp.get(selectedIndex).resize(p);
            shp.get(selectedIndex).setDraggingPoint(p);
            repaint();
        } else if (selectedIndex != -1) {
            shp.get(selectedIndex).moveTo(p);
            shp.get(selectedIndex).setDraggingPoint(p);
            repaint();
        }
    }//GEN-LAST:event_formMouseDragged
    public void copy() {

        Application a = (Application) SwingUtilities.getWindowAncestor(this);
        if (selectedIndex != -1) {
            try {
                abstractShape s = shp.get(selectedIndex);
                if (s instanceof Rectangle) {
                    Rectangle copy = (Rectangle) s.clone();
                    shp.add(copy);
                    a.appendItem("Rectangle", a.rec++);
                    repaint();
                } else if (s instanceof Oval) {
                    Oval copy = (Oval) s.clone();
                    shp.add(copy);
                    a.appendItem("Oval", a.crc++); //to add el copies' index 
                    repaint();
                } else if (s instanceof Triangle) {
                    Triangle copy = (Triangle) s.clone();
                    shp.add(copy);
                    a.appendItem("Triangle", a.tri++);
                    repaint();
                } else if (s instanceof lineSegment) {
                    lineSegment copy = (lineSegment) s.clone();
                    shp.add(copy);
                    a.appendItem("lineSegment", a.ln++);
                    repaint();
                }

            } catch (CloneNotSupportedException ex) {
            }
        }
    }

    @Override
    public void addShape(Shape shape) {
        shp.add((abstractShape) shape);
    }

    @Override
    public void removeShape(Shape shape) {
        shp.remove((abstractShape) shape);
    }

    @Override
    public Shape[] getShapes() {
        Shape s[] = new Shape[shp.size()];
        return shp.toArray(s);
    }

    @Override
    public void refresh(Graphics canvas) {
        for (int i = 0; i < shp.size(); i++) {
            shp.get(i).draw(canvas);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
